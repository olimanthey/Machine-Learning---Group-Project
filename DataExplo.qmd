---
title: "DataExplo"
format: html
editor: visual
---

```{r}
library(readr)
library(liver)
library(summarytools)
library(dplyr)
library(psych)
library(ggplot2)
library(ggmosaic)
library(GGally)
library(patchwork)
library(scales)

# Open the marine engine dataset
marine_db <- read_csv("marine_engine_data.csv")

str(marine_db)
```

# Preprocessing

## Conversion

```{r}
# Convert character columns to factors
for (i in 1:ncol(marine_db)) {
  if (is.character(marine_db[[i]])) {
    marine_db[[i]] <- as.factor(marine_db[[i]])
  }
}

# Reorder factor levels by decreasing frequency
for (i in 1:ncol(marine_db)) {
  if (is.factor(marine_db[[i]])) {
    marine_db[[i]] <- reorder(marine_db[[i]], marine_db[[i]], FUN = length)
  }
}

# Convert to Date class
marine_db$timestamp <- as.Date(marine_db$timestamp)

str(marine_db)
```

## Missing values

```{r}
sum(is.na(marine_db))
```

## Duplicate values

```{r}
sum(duplicated(marine_db))
```

The data has no missing values and no duplicates. The preprocessing process consited in factorizing categorical values.

# 1. Univariate analysis: Exploration of each variables

```{r}
db_sum <- dfSummary(marine_db, max.distinct.values = 5)
db_sum %>% View()
```

## Target variable (Y) distribution

```{r}
# Prepare data: count + percentage
maintenance_counts <- marine_db %>%
  count(maintenance_status) %>%
  mutate(perc = n / sum(n) * 100,
         label = paste0(round(perc, 1), "%"))

# Fancy bar plot
final_barplot <- ggplot(maintenance_counts, aes(x = maintenance_status, y = n, fill = maintenance_status)) +
  geom_bar(stat = "identity", width = 0.8, alpha = 0.95) +
  geom_text(aes(label = label), vjust = -0.8, size = 3) +
  scale_fill_manual(values = c(
    "Normal" = "#E57373",
    "Critical" = "#4CAF50",
    "Requires Maintenance" = "#42A5F5"
  )) +
  labs(
    title = "Distribution of Maintenance Status",
    x = NULL,
    y = "Number of Observations"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
    axis.text.x = element_text(face = "bold", size = 11),
    axis.text.y = element_text(size = 10),
    panel.grid.major.x = element_blank(),
    panel.grid.minor = element_blank(),
    legend.position = "none"
  )
final_barplot
# Save as PNG
#ggsave("maintenance_status_distr.png", plot = final_barplot, width = 6, height = 4, dpi = 300)
```

# 2. Bivariate analysis

## Numerical Distributions by Maintenance Status

```{r}
# List of numeric columns
numeric_vars <- marine_db %>% select(where(is.numeric)) %>% names()

# Generate each plot with reduced title size and simpler styling
plot_list <- lapply(numeric_vars, function(var) {
  ggplot(marine_db, aes(x = .data[[var]], fill = maintenance_status)) +
    geom_histogram(position = "stack", bins = 30, alpha = 1) +
    theme_minimal(base_size = 7) +
    labs(title = paste(var, "by Status"), x = NULL, y = NULL) +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1),
      legend.position = "none",  # We'll show one legend at the end
      plot.title = element_text(size = 8)
    )
})

# Combine the plots
main_plot <- wrap_plots(plotlist = plot_list, ncol = 3) + 
  plot_layout(guides = "collect") & 
  theme(
    legend.position = "right",
    legend.direction = "vertical",
    legend.box = "vertical",
    legend.title = element_text(size = 6, face = "bold"),
    legend.text = element_text(size = 6)
  ) &
  labs(fill = "Maintenance Status")

# Add an overall title using `plot_annotation()`
final_plot <- main_plot + 
  plot_annotation(
    title = "Distribution of Each Numerical Variable Grouped by Maintenance Status",
    theme = theme(
      plot.title = element_text(size = 12, face = "bold", hjust = 0.5)
    )
  )

# Show the final plot
final_plot

# Save as PNG
#ggsave("Distribution_num_var.png", plot = final_plot, width = 6, height = 4, dpi = 300)
```

```{r}
# Generate each plot with reduced title size and simpler styling
p1 <- ggplot(marine_db, aes(x = engine_temp, fill = maintenance_status)) +
    geom_histogram(position = "stack", bins = 30, alpha = 1) +
    facet_wrap(~maintenance_status) +
    theme_minimal(base_size = 7)  +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(size = 10, hjust = 0.5)  # Center the title
  ) +
  labs(title = "Engine Temperature by Maintenance Status",
       title.position = "middle",
       x = "Engine Temperature",
       y = "Count",
       fill = "Maintenance Status")
```

```{r}
# Generate each plot with reduced title size and simpler styling
p2 <-ggplot(marine_db, aes(x = oil_pressure, fill = maintenance_status)) +
    geom_histogram(position = "stack", bins = 30, alpha = 1) +
    facet_wrap(~maintenance_status) +
    theme_minimal(base_size = 7)  +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(size = 10, hjust = 0.5)  # Center the title
  ) +
  labs(title = "Oil Pressure by Maintenance Status",
       title.position = "middle",
       x = "Oil Pressure",
       y = NULL,
       fill = "Maintenance Status")

p1_p2 <- (p1 + p2) +
  plot_layout(guides = "collect") &
  theme(legend.position = "bottom")

ggsave("p1_p2.png", width = 10, height = 6, dpi = 300)
```

```{r}
# Generate each plot with reduced title size and simpler styling
p3 <- ggplot(marine_db, aes(x = fuel_consumption, fill = maintenance_status)) +
    geom_histogram(position = "stack", bins = 30, alpha = 1) +
    facet_wrap(~maintenance_status) +
    theme_minimal(base_size = 7)  +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(size = 10, hjust = 0.5)  # Center the title
  ) +
  labs(title = "Fuel Consumption by Maintenance Status",
       title.position = "middle",
       x = "Fuel Consumption",
       y = "Count",
       fill = "Maintenance Status")
```

```{r}
# Generate each plot with reduced title size and simpler styling
p4 <- ggplot(marine_db, aes(x = vibration_level, fill = maintenance_status)) +
    geom_histogram(position = "stack", bins = 30, alpha = 1) +
    facet_wrap(~maintenance_status) +
    theme_minimal(base_size = 7)  +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(size = 10, hjust = 0.5)  # Center the title
  ) +
  labs(title = "Vibration Level by Maintenance Status",
       title.position = "middle",
       x = "Vibration Level",
       y = NULL,
       fill = "Maintenance Status")
```

```{r}
p3_p4 <- (p3 + p4) +
  plot_layout(guides = "collect") &
  theme(legend.position = "bottom")

ggsave("EDA/p3_p4.png", width = 10, height = 6, dpi = 300)
```

```{r}
# Generate each plot with reduced title size and simpler styling
p5 <- ggplot(marine_db, aes(x = rpm, fill = maintenance_status)) +
    geom_histogram(position = "stack", bins = 30, alpha = 1) +
    facet_wrap(~maintenance_status) +
    theme_minimal(base_size = 7)  +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(size = 10, hjust = 0.5)  # Center the title
  ) +
  labs(title = "RPM by Maintenance Status",
       title.position = "middle",
       x = "RPM",
       y = "Count",
       fill = "Maintenance Status")
```

```{r}
# Generate each plot with reduced title size and simpler styling
p6 <- ggplot(marine_db, aes(x = engine_load, fill = maintenance_status)) +
    geom_histogram(position = "stack", bins = 30, alpha = 1) +
    facet_wrap(~maintenance_status) +
    theme_minimal(base_size = 7)  +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(size = 10, hjust = 0.5)  # Center the title
  ) +
  labs(title = "Engine Load by Maintenance Status",
       title.position = "middle",
       x = "Engine Load",
       y = NULL,
       fill = "Maintenance Status")
```

```{r}
p5_p6 <- (p5 + p6) +
  plot_layout(guides = "collect") &
  theme(legend.position = "bottom")

ggsave("EDA/p5_p6.png", width = 10, height = 6, dpi = 300)
```

```{r}
# Generate each plot with reduced title size and simpler styling
p7 <- ggplot(marine_db, aes(x = coolant_temp, fill = maintenance_status)) +
    geom_histogram(position = "stack", bins = 30, alpha = 1) +
    facet_wrap(~maintenance_status) +
    theme_minimal(base_size = 7)  +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(size = 10, hjust = 0.5)  # Center the title
  ) +
  labs(title = "Coolant Temperature by Maintenance Status",
       title.position = "middle",
       x = "Coolant Temperature",
       y = "Count",
       fill = "Maintenance Status")
```

```{r}
# Generate each plot with reduced title size and simpler styling
p8 <- ggplot(marine_db, aes(x = exhaust_temp, fill = maintenance_status)) +
    geom_histogram(position = "stack", bins = 30, alpha = 1) +
    facet_wrap(~maintenance_status) +
    theme_minimal(base_size = 7)  +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(size = 10, hjust = 0.5)  # Center the title
  ) +
  labs(title = "Exhaust Temperature by Maintenance Status",
       title.position = "middle",
       x = "Exhaust Temperature",
       y = NULL,
       fill = "Maintenance Status")
```

```{r}
p7_p8 <- (p7 + p8) +
  plot_layout(guides = "collect") &
  theme(legend.position = "bottom")

ggsave("EDA/p7_p8.png", width = 10, height = 6, dpi = 300)
```

```{r}
# Generate each plot with reduced title size and simpler styling
p9 <- ggplot(marine_db, aes(x = running_period, fill = maintenance_status)) +
    geom_histogram(position = "stack", bins = 30, alpha = 1) +
    facet_wrap(~maintenance_status) +
    theme_minimal(base_size = 7)  +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(size = 10, hjust = 0.5)  # Center the title
  ) +
  labs(title = "Running Period by Maintenance Status",
       title.position = "middle",
       x = "Running Period",
       y = "Count",
       fill = "Maintenance Status")
```

```{r}
# Generate each plot with reduced title size and simpler styling
p10 <- ggplot(marine_db, aes(x = fuel_consumption_per_hour, fill = maintenance_status)) +
    geom_histogram(position = "stack", bins = 30, alpha = 1) +
    facet_wrap(~maintenance_status) +
    theme_minimal(base_size = 7)  +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(size = 10, hjust = 0.5)  # Center the title
  ) +
  labs(title = "Fuel Consumption Per Hour by Maintenance Status",
       title.position = "middle",
       x = "Fuel Consumption Per Hour",
       y = NULL,
       fill = "Maintenance Status")
```

```{r}
p9_p10 <- (p9 + p10) +
  plot_layout(guides = "collect") &
  theme(legend.position = "bottom")

ggsave("EDA/p9_p10.png", width = 10, height = 6, dpi = 300)
```

### Key Takeaways

-   Useful features: `engine_temp`, `vibration_level`, `rpm`, `coolant_temp`
-   Neutral/less useful: `engine_load`, `running_period`
-   Likely drop: `exhaust_temp`, `fuel_consumption_per_hour`, possibly `oil_pressure`

## Categorical Distributions by Maintenance Status

```{r}
# List of factor columns
factor_vars <- marine_db %>% select(where(is.factor)) %>% select(-engine_id, -maintenance_status)%>% names()

# Generate each plot with reduced title size and simpler styling
plot_list <- lapply(factor_vars, function(var) {
  ggplot(marine_db, aes(x = .data[[var]], fill = maintenance_status)) +
    geom_bar(position = "stack", bins = 30, alpha = 1) +
    theme_minimal(base_size = 7) +
    labs(title = paste(var, "by Status"), x = NULL, y = NULL) +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1),
      legend.position = "none",  # We'll show one legend at the end
      plot.title = element_text(size = 10)
    )
})

# Combine the plots
main_plot <- wrap_plots(plotlist = plot_list, ncol = 2) + 
  plot_layout(guides = "collect") & 
  theme(
    legend.position = "right",
    legend.direction = "vertical",
    legend.box = "vertical",
    legend.title = element_text(size = 6, face = "bold"),
    legend.text = element_text(size = 6)
  ) &
  labs(fill = "Maintenance Status")

# Add an overall title using `plot_annotation()`
final_plot <- main_plot + 
  plot_annotation(
    title = "Distribution of Each Categorical Variable Grouped by Maintenance Status",
    theme = theme(
      plot.title = element_text(size = 12, face = "bold", hjust = 0.5)
    )
  )

# Show the final plot
print(final_plot)

# Save as PNG
ggsave("Distribution_cat_var.png", plot = final_plot, width = 6, height = 4, dpi = 300)
```

### Key Takeaways

-   Useful features: `failure_mode`, `manufacturer`
-   Potentially helpful when combined: `engine_type`, `fuel_type`
-   No immediate red flags — all categories show sufficient class balance for modeling

# 3. Correlation heat-map

```{r}
# Select numeric columns
numeric_data <- marine_db %>% select(where(is.numeric))

# Compute correlation matrix
cor_matrix <- round(cor(numeric_data, use = "complete.obs"), 2)

# Convert to long format for ggplot
cor_long <- as.data.frame(as.table(cor_matrix)) %>%
  rename(Var1 = Var1, Var2 = Var2, Correlation = Freq)

# Create heatmap
heatmap <- ggplot(cor_long, aes(x = Var1, y = Var2, fill = Correlation)) +
  geom_tile(color = "white") +
  geom_text(aes(label = Correlation), size = 3, color = "black") +
  scale_fill_gradient2(low = "#B2182B", high = "#2166AC", mid = "white",
                       midpoint = 0, limit = c(-1, 1), name = "Correlation") +
  labs(title = "Correlation Heatmap of Numerical Variables", x = "", y = "") +
  theme_minimal(base_size = 8) +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
    plot.title = element_text(hjust = 0.5, face = "bold")
  )

# Save as PNG
ggsave("correlation_heat_map.png", plot = heatmap, width = 6, height = 4, dpi = 300)
```

### Key Takeaways

-   Features like `engine_temp`, `coolant_temp`, `engine_load`, and `oil_pressure` show strong internal consistency and could serve as reliable predictors.
-   `fuel_consumption_per_hour` and `exhaust_temp` are likely uninformative and may be removed or deprioritized.
-   Use caution with `rpm` — although it may be operationally important, it's statistically isolated in this dataset.

# 4. Outliers

## **Use IQR Method (Univariate)**

For each numerical variable, flag points that fall outside:

-   `fuel_consumption:` IQR (CV) : 3699 (0.6)

-   `rpm:` IQR (CV) : 273.8 (0.1)

-   `running_period:` IQR (CV) : 86.1 (0.6)

-   `engine_load:` IQR (CV) : 30.2 (0.3)

-   `coolant_temp:` IQR (CV) : 10.8 (0.1)

-   `engine_temp:` IQR (CV) : 10.4 (0.1)

-   `oil_pressure:` IQR (CV) : 1.3 (0.1)

-   `vibration_level:` IQR (CV) : 0.5 (0.1)

-   `fuel_consumption_per_hour:` IQR (CV) : 0 (0.7)

-   `exhaust_temp:` IQR (CV) : 0 (0)

```{r}
# Boxplot for fuel_consumption
p1 <- ggplot(marine_db, aes(x = maintenance_status, y = fuel_consumption, fill = maintenance_status)) +
  geom_boxplot(outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
  labs(title = "Fuel Consumption by Maintenance Status", x = NULL, y = "Fuel Consumption") +
  theme_minimal(base_size = 11) +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    legend.position = "none"
  )

# Boxplot for rpm
p2 <- ggplot(marine_db, aes(x = maintenance_status, y = rpm, fill = maintenance_status)) +
  geom_boxplot(outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
  labs(title = "RPM by Maintenance Status", x = NULL, y = "RPM") +
  theme_minimal(base_size = 11) +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    legend.position = "none"
  )

# Combine with patchwork
p1 + p2

```

```{r}
# Define a reusable theme
box_theme <- theme_minimal(base_size = 11) +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    legend.position = "none"
  )

# Create plots
p1 <- ggplot(marine_db, aes(x = maintenance_status, y = running_period, fill = maintenance_status)) +
  geom_boxplot(outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
  labs(title = "Running Period", y = "Hours", x = NULL) +
  box_theme

p2 <- ggplot(marine_db, aes(x = maintenance_status, y = engine_load, fill = maintenance_status)) +
  geom_boxplot(outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
  labs(title = "Engine Load", y = "Load %", x = NULL) +
  box_theme

p3 <- ggplot(marine_db, aes(x = maintenance_status, y = coolant_temp, fill = maintenance_status)) +
  geom_boxplot(outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
  labs(title = "Coolant Temperature", y = "°C", x = NULL) +
  box_theme

p4 <- ggplot(marine_db, aes(x = maintenance_status, y = engine_temp, fill = maintenance_status)) +
  geom_boxplot(outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
  labs(title = "Engine Temperature", y = "°C", x = NULL) +
  box_theme

# Combine all plots in one row
p1 + p2 + p3 + p4
```

```{r}
# Reusable theme
box_theme <- theme_minimal(base_size = 11) +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    legend.position = "none"
  )

# Create each boxplot
p1 <- ggplot(marine_db, aes(x = maintenance_status, y = oil_pressure, fill = maintenance_status)) +
  geom_boxplot(outlier.color = "red", outlier.size = 2) +
  labs(title = "Oil Pressure", y = "Bar", x = NULL) +
  box_theme

p2 <- ggplot(marine_db, aes(x = maintenance_status, y = vibration_level, fill = maintenance_status)) +
  geom_boxplot(outlier.color = "red", outlier.size = 2) +
  labs(title = "Vibration Level", y = NULL, x = NULL) +
  box_theme

p3 <- ggplot(marine_db, aes(x = maintenance_status, y = fuel_consumption_per_hour, fill = maintenance_status)) +
  geom_boxplot(outlier.color = "red", outlier.size = 2) +
  labs(title = "Fuel Consumption/hr", y = NULL, x = NULL) +
  box_theme

p4 <- ggplot(marine_db, aes(x = maintenance_status, y = exhaust_temp, fill = maintenance_status)) +
  geom_boxplot(outlier.color = "red", outlier.size = 2) +
  labs(title = "Exhaust Temperature", y = NULL, x = NULL) +
  box_theme

# Combine in one row
p1 + p2 + p3 + p4
```

## Summarize Outliers Programmatically

```{r}
detect_outliers <- function(x) {
  q1 <- quantile(x, 0.25, na.rm = TRUE)
  q3 <- quantile(x, 0.75, na.rm = TRUE)
  iqr <- q3 - q1
  lower <- q1 - 1.5 * iqr
  upper <- q3 + 1.5 * iqr
  sum(x < lower | x > upper, na.rm = TRUE)
}

marine_db %>%
  select(where(is.numeric)) %>%
  summarise_all(detect_outliers)

```

## Multivariate Outlier Detection

```{r}
# Step 1: Select numeric variables only
numeric_data <- marine_db %>% select(where(is.numeric))

# Step 2: Compute Mahalanobis distances
cov_matrix <- cov(numeric_data, use = "complete.obs")       # Covariance matrix
center <- colMeans(numeric_data, na.rm = TRUE)              # Mean vector
distances <- mahalanobis(numeric_data, center, cov_matrix)  # Mahalanobis distance

# Step 3: Set threshold using chi-squared distribution (95% confidence)
threshold <- qchisq(0.975, df = ncol(numeric_data))

# Step 4: Identify outliers
outlier_indices <- which(distances > threshold)
outliers <- marine_db[outlier_indices, ]

# Step 5 (Optional): Add Mahalanobis distance to original data
marine_db$mahal_dist <- distances
marine_db$outlier_flag <- ifelse(distances > threshold, "Outlier", "Inlier")

# Step 6 (Optional): View a summary
table(marine_db$outlier_flag)
```
